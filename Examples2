import random
import math
import numpy as np
import array
import random
import numpy as np
import pandas as pd
import numbers
import scipy
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import Lasso
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from phi import *
import random
import os
from math import *
from collections import namedtuple



from phi import *


#
# def calcCourseBetweenPointsBad(lat1, lat2, lon1, lon2, dist):
#     """ This function calculates the great circle course between 2 points given their latitudes
#     and longitudes in radians, and the distance between the 2 points"""
#
#     sinlat1 = math.sin(lat1)
#     sinlat2 = math.sin(lat2)
#     coslat1 = math.cos(lat1)
#     cosd = math.cos(dist)
#     sind = math.sin(dist)
#     num = sinlat2 - sinlat1 * cosd
#     denom = sind * coslat1
#     crsTmp = math.acos(num/denom)
#     pred = math.sin(lon2 - lon1) < math.pi #bug
#     if pred:
#         result = crsTmp
#     else:
#         result = 2 * math.pi - crsTmp
#     return result
#
#
# def calcCourseBetweenPointsGood(lat1, lat2, lon1, lon2, dist):
#     """ This function calculates the great circle course between 2 points given their latitudes
#     and longitudes in radians, and the distance between the 2 points"""
#
#     sinlat1 = math.sin(lat1)
#     sinlat2 = math.sin(lat2)
#     coslat1 = math.cos(lat1)
#     cosd = math.cos(dist)
#     sind = math.sin(dist)
#     num = sinlat2 - sinlat1 * cosd
#     denom = sind * coslat1
#     crsTmp = math.acos(num / denom)
#     pred = math.sin(lon2 - lon1) < 0
#     if pred:
#         result = crsTmp
#     else:
#         result = 2 * math.pi - crsTmp
#     return result
#
# def distanceBetweenPoints(lat1, lat2, lon1, lon2):
#     """ This function will calculate the difference between 2 points given their latitudes
#     and longitudes in radians"""
#
#     return math.acos(math.sin(lat1)*math.sin(lat2) + math.cos(lat1)*math.cos(lat2)*math.cos(lon1-lon2))
def calcCourseBetweenPointsBad(lat1, lat2, lon1, lon2, dist):
    lat1_0 = lat1;
    lat2_0 = lat2;
    lon1_0 = lon1;
    lon2_0 = lon2;
    dist_0 = dist;
    coslat1_0 = None;
    num_0 = None;
    sinlat1_0 = None;
    result_0 = None;
    result_1 = None;
    result_2 = None;
    sinlat2_0 = None;
    cosd_0 = None;
    pred_0 = None;
    crsTmp_0 = None;
    sind_0 = None;
    denom_0 = None;

    """ This function calculates the great circle course between 2 points given their latitudes
    and longitudes in radians, and the distance between the 2 points"""
    sinlat1_0 = math.sin(lat1_0)
    sinlat2_0 = math.sin(lat2_0)
    coslat1_0 = math.cos(lat1_0)
    cosd_0 = math.cos(dist_0)
    sind_0 = math.sin(dist_0)
    num_0 = sinlat2_0 - sinlat1_0 * cosd_0
    denom_0 = sind_0 * coslat1_0
    crsTmp_0 = math.acos(num_0 / denom_0)
    pred_0 = math.sin(lon2_0 - lon1_0) < math.pi/4 #BUG
    if pred_0:
        result_0 = crsTmp_0
    else:
        result_1 = 2 * math.pi - crsTmp_0
    phiPreds = [pred_0]
    phiNames = [result_0, result_1]
    result_2 = phiIf(phiPreds, phiNames)
    lo = locals()
    record_locals(lo, test_counter)
    return result_2


def calcCourseBetweenPointsGood(lat1, lat2, lon1, lon2, dist):
    lat1_1 = lat1;
    lat2_1 = lat2;
    lon1_1 = lon1;
    lon2_1 = lon2;
    dist_1 = dist;
    coslat1_1 = None;
    num_1 = None;
    sinlat1_1 = None;
    result_3 = None;
    result_4 = None;
    result_5 = None;
    sinlat2_1 = None;
    cosd_1 = None;
    pred_1 = None;
    crsTmp_1 = None;
    sind_1 = None;
    denom_1 = None;

    """ This function calculates the great circle course between 2 points given their latitudes
    and longitudes in radians, and the distance between the 2 points"""
    sinlat1_1 = math.sin(lat1_1)
    sinlat2_1 = math.sin(lat2_1)
    coslat1_1 = math.cos(lat1_1)
    cosd_1 = math.cos(dist_1)
    sind_1 = math.sin(dist_1)
    num_1 = sinlat2_1 - sinlat1_1 * cosd_1
    denom_1 = sind_1 * coslat1_1
    crsTmp_1 = math.acos(num_1 / denom_1)
    pred_1 = math.sin(lon2_1 - lon1_1) < 0 #BUG
    if pred_1:
        result_3 = crsTmp_1
    else:
        result_4 = 2 * math.pi - crsTmp_1
    phiPreds = [pred_1]
    phiNames = [result_3, result_4]
    result_5 = phiIf(phiPreds, phiNames)
    return result_5


def distanceBetweenPoints(lat1, lat2, lon1, lon2):
    lat1_2 = lat1;
    lat2_2 = lat2;
    lon1_2 = lon1;
    lon2_2 = lon2;

    """ This function will calculate the difference between 2 points given their latitudes
    and longitudes in radians"""
    return math.acos(
        math.sin(lat1_2) * math.sin(lat2_2) + math.cos(lat1_2) * math.cos(lat2_2) * math.cos(lon1_2 - lon2_2))


# generate python causal map
causal_map = {'sinlat2_0': ['lat2_0'], 'sinlat1_1': ['lat1_1'], 'sinlat2_1': ['lat2_1'], 'sinlat1_0': ['lat1_0'],
              'sind_0': ['dist_0'], 'pred_0': ['lon2_0', 'lon1_0'], 'sind_1': ['dist_1'],
              'pred_1': ['lon2_1', 'lon1_1'], 'result_2': ['result_0', 'result_1', 'pred_0'], 'result_3': ['crsTmp_1'],
              'crsTmp_0': ['num_0', 'denom_0'], 'cosd_1': ['dist_1'], 'result_4': ['crsTmp_1'], 'cosd_0': ['dist_0'],
              'crsTmp_1': ['num_1', 'denom_1'], 'result_5': ['result_3', 'result_4', 'pred_1'],
              'result_0': ['crsTmp_0'], 'num_0': ['sinlat2_0', 'sinlat1_0', 'cosd_0'], 'result_1': ['crsTmp_0'],
              'denom_0': ['sind_0', 'coslat1_0'], 'coslat1_1': ['lat1_1'], 'coslat1_0': ['lat1_0'],
              'denom_1': ['sind_1', 'coslat1_1'], 'num_1': ['sinlat2_1', 'sinlat1_1', 'cosd_1'], }

# added phi names
phi_names_set = {'result_2', 'result_5', }
d = {}
f = {}

global_value_dict = {}
arg1s = np.arange(0, 10, 0.01)
test_counter = 0
diffCnt=0
def record_locals(lo, i):
    for name in lo:
        if '_IV' in name:
            continue
        if isinstance(lo[name], numbers.Number) and name in causal_map:
            if name not in global_value_dict:
                columns = causal_map[name].copy()
                columns.insert(0, name)
                global_value_dict[name] = pd.DataFrame(columns=columns)
            new_row = [np.float64(lo[name])]

            for pa in causal_map[name]:
                if isinstance(lo[pa], numbers.Number):
                    new_row.append(np.float64(lo[pa]))
                else:
                    new_row.append(lo[pa])
            global_value_dict[name].loc[i] = new_row


for i in range(1, 1000):
    lat1 = random.uniform(-math.pi, math.pi)
    lat2 = random.uniform(-math.pi, math.pi)
    lon1 = random.uniform(-math.pi, math.pi)
    lon2 = random.uniform(-math.pi, math.pi)

    dist = distanceBetweenPoints(lat1, lat2, lon1, lon2)

    d[i] = calcCourseBetweenPointsGood(lat1, lat2, lon1, lon2, dist)
    f[i] = calcCourseBetweenPointsBad(lat1, lat2, lon1, lon2, dist)
    test_counter += 1
    if d[i] != f[i]:
        diffCnt += 1
diff_dict = {index: 0.0 if f[index] == d[index] else 1.0 for index in d}
print(diff_dict)
print(diffCnt)
for key in global_value_dict:
    rows = global_value_dict[key].index + 1
    outcome_list = [diff_dict[i] for i in rows]
    global_value_dict[key]['outcome'] = outcome_list


def get_quantiled_tr(W):
    # 10 quantiles from 0.05 to 0.95
    quantile_list = []
    for i in np.arange(0.05, 1.05, 0.1):
        quantile_list.append(W.quantile(i))
    return quantile_list


def predict_causal_risk_list(train_set_X, quantiles, model):
    risk_list = []
    print(train_set_X.columns[0] + " being treatment...")
    X_with_quantile = train_set_X.drop(train_set_X.columns[0], axis=1)

    for quantile in quantiles:
        X_with_quantile.insert(loc=0, column=train_set_X.columns[0],
                               value=np.full((len(X_with_quantile), 1), quantile))
        # X_with_quantile[train_set_X.columns[col_index_todrop]] = np.full((len(X_with_quantile), 1), quantile)
        # print(X_with_quantile.describe())
        risk_list.append(model.predict(X_with_quantile).mean())
        X_with_quantile = X_with_quantile.drop(train_set_X.columns[0], axis=1)
    return risk_list


def suspicious_ranking(global_value_dict, model_to_use):
    suspicious_df = pd.DataFrame(columns=['variable_name', 'max_risk_diff', 'quantile1', 'quantile2'])
    for name in global_value_dict:
        if name in phi_names_set:
            continue

        # df cleaning
        # df = global_value_dict[name].select_dtypes(include=[np.number]).dropna(axis=1, how='all')
        df = global_value_dict[name].select_dtypes(include=[np.number]).dropna(axis=1, how='any')
        train_set = df
        # train_set, test_set = train_test_split(df, test_size=0.2, random_state=42)
        train_set_X = train_set.drop(['outcome'], axis=1)
        train_set_Y = train_set['outcome']
        if model_to_use == 0:
            model = RandomForestClassifier(n_estimators=500, max_leaf_nodes=16, n_jobs=-1)
        if model_to_use == 1:
            model = Lasso(alpha=0.1)

        model.fit(train_set_X, train_set_Y)

        W = df.iloc[:, 0].to_frame()
        with open('.' + '/' + str(name) + ".txt",
                  "w") as f1:
            f1.write(str(train_set_X.to_csv(sep=' ', mode='a')))
        quantiles = get_quantiled_tr(W)
        risk_list = predict_causal_risk_list(train_set_X, quantiles, model)
        max_risk = max(risk_list)
        min_risk = min(risk_list)
        row = [df.columns[0], max_risk - min_risk, risk_list.index(max_risk),
               risk_list.index(min_risk)]
        suspicious_df.loc[len(suspicious_df)] = row
    suspicious_df = suspicious_df.sort_values(by='max_risk_diff', ascending=False)
    return filter_phi_rows(suspicious_df, phi_names_set)


def filter_phi_rows(suspicious_df, phi_names_set):
    return suspicious_df[~suspicious_df['variable_name'].isin(phi_names_set)]


# 0-> random forest  1 -> lasso
result = suspicious_ranking(global_value_dict, 0)
pd.set_option("display.precision", 8)
print('*************Target variables in total: ', len(result), '*************')
print(result)
